package LeetCode_Easy.L225_20190220_Page9;

import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Queue;

/**
 使用队列实现栈的下列操作：

 push(x) -- 元素 x 入栈
 pop() -- 移除栈顶元素
 top() -- 获取栈顶元素
 empty() -- 返回栈是否为空
 注意:

 你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。
 */
public class OtherMyStack {
    private Queue<Integer> data;

    public OtherMyStack() {
        data = new LinkedList<>();
    }

    public void push(int x) {
        data.offer(x);
        //将队列中前面已经逆序的元素放在x元素后面，使得整体逆序
        for (int i = 0; i < data.size() - 1; i++) {
            data.offer(data.poll());
        }
    }

    public int pop() {
        return data.poll();
    }

    public int top() {
        return data.peek();
    }

    public boolean empty() {
        return data.isEmpty();
    }
}
