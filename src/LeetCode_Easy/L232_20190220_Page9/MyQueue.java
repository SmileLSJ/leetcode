package LeetCode_Easy.L232_20190220_Page9;

import java.util.Stack;

/**
 使用栈实现队列的下列操作：

 push(x) -- 将一个元素放入队列的尾部。
 pop() -- 从队列首部移除元素。
 peek() -- 返回队列首部的元素。
 empty() -- 返回队列是否为空。
 示例:

 MyQueue queue = new MyQueue();

 queue.push(1);
 queue.push(2);
 queue.peek();  // 返回 1
 queue.pop();   // 返回 1
 queue.empty(); // 返回 false
 说明:

 你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。
 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。
 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。


 使用付付得正的效果，来实现队列的效果
 */
public class MyQueue {

    private Stack<Integer> head;

    /** Initialize your data structure here. */
    public MyQueue() {
        head = new Stack<>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        head.push(x);

    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if (head.isEmpty()) return -1;
        Stack<Integer> tmp = new Stack<>();
        while(!head.isEmpty()){
            tmp.push(head.pop());
        }

        Integer result = tmp.pop();
        while(!tmp.isEmpty()){
            head.push(tmp.pop());
        }
        return result;
    }

    /** Get the front element. */
    public int peek() {
        if (head.isEmpty()) return -1;
        Stack<Integer> tmp = new Stack<>();
        while(!head.isEmpty()){
            tmp.push(head.pop());
        }

        Integer result = tmp.pop();
        head.push(result);
        while(!tmp.isEmpty()){
            head.push(tmp.pop());
        }
        return result;

    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return head.isEmpty();
    }
}
