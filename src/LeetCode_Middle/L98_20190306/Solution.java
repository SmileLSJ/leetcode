package LeetCode_Middle.L98_20190306;

/**给定一个二叉树，判断其是否是一个有效的二叉搜索树。

 假设一个二叉搜索树具有如下特征：

 节点的左子树只包含小于当前节点的数。
 节点的右子树只包含大于当前节点的数。
 所有左子树和右子树自身必须也是二叉搜索树。
 示例 1:

 输入:
 2
 / \
 1   3
 输出: true
 示例 2:

 输入:
 5
 / \
 1   4
 / \
 3   6
 输出: false
 解释: 输入为: [5,1,4,null,null,3,6]。
 根节点的值为 5 ，但是其右子节点值为 4 。

 */
class Solution {
    public boolean isValidBST(TreeNode root) {

        if(root==null) return true;

        boolean isLeft = false;
        boolean isRight = false;

        if(root.left!=null){
            if(root.left.val<root.val){
                isLeft = isValidBST(root.left);
            }
        }else{
            isLeft=true;
        }


        if(root.right!=null){
            if(root.right.val>root.val){
                isRight = isValidBST(root.right);
            }
        }else{
            isRight =  true;
        }

        return isLeft && isRight;
    }




    class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
  }
}
